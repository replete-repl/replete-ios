#!/usr/bin/env bash

# Run this from the replete/ClojureScript/replete directory

# Make sure we fail and exit on the command that actually failed.
set -e
set -o pipefail

export CLOSURE_RELEASE="20210808"
script/get-closure-compiler

cat <<EOF > bundle.c
#include <stdlib.h>
#include <string.h>

#include <zlib.h>
EOF

cat <<EOF > bundle_dict.c
unsigned char *bundle_path_to_addr(char *path, unsigned int *len, unsigned int *gz_len) {
	if (path == NULL) {
		return NULL;
	}
EOF

CLOSURE_OPTIMIZATIONS="${CLOSURE_OPTIMIZATIONS:-SIMPLE}"

if [ "$FAST_BUILD" == "1" ]
then
  echo "Because this is a fast build, setting Closure Optimizations to NONE"
  CLOSURE_OPTIMIZATIONS=NONE
fi

if [ "$CLOSURE_OPTIMIZATIONS" != "NONE" ]
then
  echo "### Optimizing bundled JavaScript with Closure Optimizations:" $CLOSURE_OPTIMIZATIONS
fi

cd out
# We don't need to bundle the extra cljs/core$macros.cljc file
rm -f cljs/core\$macros.cljc

for file in `find . -name '*.js' -o -name '*.cljs' -o -name '*.cljc' -o -name '*.clj' -o -name '*.json'`
do 
file=${file:2}
cp -p $file $file.bak
if [ $CLOSURE_OPTIMIZATIONS != "NONE" ] && [ ${file: -3} == ".js" ] && [ "${file: -7}" != "deps.js" ] && [ "${file: -9}" != "bundle.js" ] && [ "${file: -9}" != "jscomp.js" ] && [ "${file: -10}" != "paredit.js" ] && [ "${file: -6}" != "csv.js" ] && [ "${file: -19}" != "performancetimer.js" ] && [ "${file: 0:10}" != "goog/labs/" ] && [ "${file: 0:15}" != "goog/useragent/" ] && [ "${file}" != "goog/array/array.js" ] && [ "${file}" != "goog/crypt/aes.js" ] && [ "${file}" != "goog/async/run.js" ] && [ "${file: 0:10}" != "goog/html/" ] && [ "${file}" != "goog/math/long.js" ] && [ "${file: 0:13}" != "goog/testing/" ] && [ "${file: 0:13}" != "goog/memoize/" ] && [ "${file: 0:13}" != "goog/asserts/" ] && [ "${file}" != "goog/object/object.js" ] && [ "${file: 0:12}" != "goog/proto2/" ] && [ "${file}" != "goog/base.js" ] && [ "${file: 0:9}" != "goog/dom/" ] && [ "${file: 0:12}" != "goog/events/" ] && [ "${file: 0:10}" != "goog/i18n/" ] && [ "${file: 0:17}" != "goog/collections/" ] && [ "${file: 0:16}" != "goog/disposable/" ] && [ "${file: 0:11}" != "goog/debug/" ]
then
  if [ ! -f $file.optim ] || [ $file -nt $file.optim ]
  then
    # Process goog.define, converting to default value expression
    sed -E -ibak 's/goog.define\(".*",(.*)\);/\1;/g' $file
    # osascript -e "display notification \"Closure compiling $file\" with title \"Replete\""
    java -jar ../compiler/closure-compiler-v$CLOSURE_RELEASE.jar --compilation_level $CLOSURE_OPTIMIZATIONS --language_in ECMASCRIPT6 --language_out ECMASCRIPT6 --process_closure_primitives false --jscomp_off=suspiciousCode --js $file --js_output_file $file.optim
    echo -n "."
  fi
  cp $file.optim $file
fi

uncompressed_file_size=`wc -c $file | sed -e 's/^ *//' | cut -d' ' -f1`
gzip -9 $file
mv $file.bak $file
filegz=$file.gz
xxd -i $filegz >> ../bundle.c
rm $filegz
data_ref=${filegz//\//_}
data_ref=${data_ref//\./_}
data_ref=${data_ref//\$/_}
echo "unsigned int ${data_ref}_len_uncompressed = ${uncompressed_file_size};" >> ../bundle.c
cat <<EOF >> ../bundle_dict.c
	else if (strcmp("${file}", path) == 0) {
		*gz_len = ${data_ref}_len;
		*len = ${data_ref}_len_uncompressed;
		return ${data_ref};
	}
EOF
done

if [ "$CLOSURE_OPTIMIZATIONS" != "NONE" ]
then
  echo
fi
cd ..
cat <<EOF >> bundle_dict.c

	return NULL;
}
EOF
cat bundle_dict.c >> bundle.c
cat <<EOF >> bundle.c
#include "bundle_inflate.h"

char *bundle_get_contents(char *path) {
	unsigned int gz_len = 0;
	unsigned int len = 0;
	unsigned char *gz_data = bundle_path_to_addr(path, &len, &gz_len);

	if (gz_data == NULL) {
		return NULL;
	}

	char *contents = malloc((len + 1) * sizeof(char));
	memset(contents, 0, len + 1);
	int res = 0;
	if ((res = bundle_inflate(contents, gz_data, gz_len, len)) < 0) {
		free(contents);
		return NULL;
	}

	return contents;
}

#ifdef BUNDLE_TEST
#include <stdio.h>

int main(int argc, char **argv) {
	if (argc != 2) {
		printf("%s <path>\n", argv[0]);
		exit(1);
	}

	char *contents = bundle_get_contents(argv[1]);
	if (contents == NULL) {
		printf("not in bundle\n");
		exit(1);
	}

	printf("%s", contents);
	free(contents);

	return 0;
}
#endif
EOF
rm bundle_dict.c
mv bundle.c ../../Replete/bundle.c
# We don't want git to suggest we commit this generated
# output, so we suppress it here.
if [ -d ../../.git ]; then
  git update-index --assume-unchanged ../../Replete/bundle.c
fi;
